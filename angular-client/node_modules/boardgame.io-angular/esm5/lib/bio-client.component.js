/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { Client as RawClient } from 'boardgame.io/dist/client';
var ClientComponent = /** @class */ (function () {
    function ClientComponent() {
        // instance inputs
        this.gameID = 'default';
        this.playerID = null;
        this.credentials = null;
        // overridable inputs (both class and instance)
        this.debug = true;
    }
    /**
     * @return {?}
     */
    ClientComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.client = RawClient({
            game: this.game,
            ai: this.ai,
            numPlayers: this.numPlayers,
            multiplayer: this.multiplayer,
            gameID: this.gameID,
            playerID: this.playerID,
            credentials: this.credentials,
            enhancer: this.enhancer,
        });
        // todo is this needed? (forceUpdate on react)
        // this.client.subscribe(() => {
        //   console.log('client.subscribe triggered (forceUpdate needed?)');
        // });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ClientComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.client) {
            // noinspection TsLint
            if (changes["gameID"] && changes["gameID"].currentValue != changes["gameID"].previousValue) {
                this.client.updateGameID(changes["gameID"].currentValue);
            }
            // noinspection TsLint
            if (changes["playerID"] && changes["playerID"].currentValue != changes["playerID"].previousValue) {
                this.client.updatePlayerID(changes["playerID"].currentValue);
            }
            // noinspection TsLint
            if (changes["credentials"] && changes["credentials"].currentValue != changes["credentials"].previousValue) {
                this.client.updateCredentials(changes["credentials"].currentValue);
            }
        }
    };
    /**
     * @return {?}
     */
    ClientComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.client.connect();
    };
    /**
     * @return {?}
     */
    ClientComponent.prototype.getBoardInputs = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ state = this.client.getState();
        return tslib_1.__assign({}, state, { isMultiplayer: this.multiplayer !== undefined, moves: this.client.moves, events: this.client.events, gameID: this.gameID, playerID: this.playerID, reset: this.client.reset, undo: this.client.undo, redo: this.client.redo });
    };
    ClientComponent.decorators = [
        { type: Component, args: [{
                    selector: 'bio-client',
                    template: "\n    <ng-container *ngIf=\"client\">\n      <ng-container *ngComponentOutlet=\"board;\n                                            ndcDynamicInputs: getBoardInputs()\">\n      </ng-container>\n    </ng-container>\n\n    <bio-debug *ngIf=\"debug && client\"\n               [gamestate]=\"client.getState()\"\n               [gameID]=\"gameID\"\n               [playerID]=\"playerID\"\n               [isMultiplayer]=\"multiplayer !== undefined\"\n               [moves]=\"client.moves\"\n               [events]=\"client.events\"\n               [store]=\"client.store\"\n               [step]=\"client.step\"\n               [reset]=\"client.reset\"\n               [reducer]=\"client.reducer\"\n    ></bio-debug>\n  "
                },] },
    ];
    ClientComponent.propDecorators = {
        game: [{ type: Input }],
        numPlayers: [{ type: Input }],
        board: [{ type: Input }],
        multiplayer: [{ type: Input }],
        ai: [{ type: Input }],
        enhancer: [{ type: Input }],
        gameID: [{ type: Input }],
        playerID: [{ type: Input }],
        credentials: [{ type: Input }],
        debug: [{ type: Input }]
    };
    return ClientComponent;
}());
export { ClientComponent };
function ClientComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ClientComponent.prototype.game;
    /** @type {?} */
    ClientComponent.prototype.numPlayers;
    /** @type {?} */
    ClientComponent.prototype.board;
    /** @type {?} */
    ClientComponent.prototype.multiplayer;
    /** @type {?} */
    ClientComponent.prototype.ai;
    /** @type {?} */
    ClientComponent.prototype.enhancer;
    /** @type {?} */
    ClientComponent.prototype.gameID;
    /** @type {?} */
    ClientComponent.prototype.playerID;
    /** @type {?} */
    ClientComponent.prototype.credentials;
    /** @type {?} */
    ClientComponent.prototype.debug;
    /** @type {?} */
    ClientComponent.prototype.client;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlvLWNsaWVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9ib2FyZGdhbWUuaW8tYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9iaW8tY2xpZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBb0IsU0FBUyxFQUFFLEtBQUssRUFBb0MsTUFBTSxlQUFlLENBQUM7QUFDckcsT0FBTyxFQUFFLE1BQU0sSUFBSSxTQUFTLEVBQVMsTUFBTSwwQkFBMEIsQ0FBQzs7OztzQkFvQ2xELFNBQVM7d0JBQ0MsSUFBSTsyQkFDRCxJQUFJOztxQkFHbEIsSUFBSTs7Ozs7SUFJckIsa0NBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7WUFDdEIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ1gsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzNCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7U0FDeEIsQ0FBQyxDQUFDOzs7OztLQU1KOzs7OztJQUVELHFDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUNoQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs7WUFFaEIsRUFBRSxDQUFDLENBQUMsT0FBTyxjQUFXLE9BQU8sV0FBUSxZQUFZLElBQUksT0FBTyxXQUFRLGFBQWEsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xGLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sV0FBUSxZQUFZLENBQUMsQ0FBQzthQUN2RDs7WUFFRCxFQUFFLENBQUMsQ0FBQyxPQUFPLGdCQUFhLE9BQU8sYUFBVSxZQUFZLElBQUksT0FBTyxhQUFVLGFBQWEsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hGLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sYUFBVSxZQUFZLENBQUMsQ0FBQzthQUMzRDs7WUFFRCxFQUFFLENBQUMsQ0FBQyxPQUFPLG1CQUFnQixPQUFPLGdCQUFhLFlBQVksSUFBSSxPQUFPLGdCQUFhLGFBQWEsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pHLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsT0FBTyxnQkFBYSxZQUFZLENBQUMsQ0FBQzthQUNqRTtTQUNGO0tBQ0Y7Ozs7SUFFRCw0Q0FBa0I7OztJQUFsQjtRQUNFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDdkI7Ozs7SUFFRCx3Q0FBYzs7O0lBQWQ7UUFDRSxxQkFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNyQyxNQUFNLHNCQUNELEtBQUssSUFDUixhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQzdDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFDeEIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUMxQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFDbkIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQ3ZCLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFDeEIsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUN0QixJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQ3RCO0tBRUg7O2dCQWhHRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFlBQVk7b0JBQ3RCLFFBQVEsRUFBRSxndEJBbUJUO2lCQUNGOzs7dUJBSUUsS0FBSzs2QkFDTCxLQUFLO3dCQUNMLEtBQUs7OEJBQ0wsS0FBSztxQkFDTCxLQUFLOzJCQUNMLEtBQUs7eUJBR0wsS0FBSzsyQkFDTCxLQUFLOzhCQUNMLEtBQUs7d0JBR0wsS0FBSzs7MEJBMUNSOztTQTBCYSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQ29tcG9uZW50LCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ2xpZW50IGFzIFJhd0NsaWVudCwgRGVidWcgfSBmcm9tICdib2FyZGdhbWUuaW8vZGlzdC9jbGllbnQnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdiaW8tY2xpZW50JyxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImNsaWVudFwiPlxyXG4gICAgICA8bmctY29udGFpbmVyICpuZ0NvbXBvbmVudE91dGxldD1cImJvYXJkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5kY0R5bmFtaWNJbnB1dHM6IGdldEJvYXJkSW5wdXRzKClcIj5cclxuICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICA8L25nLWNvbnRhaW5lcj5cclxuXHJcbiAgICA8YmlvLWRlYnVnICpuZ0lmPVwiZGVidWcgJiYgY2xpZW50XCJcclxuICAgICAgICAgICAgICAgW2dhbWVzdGF0ZV09XCJjbGllbnQuZ2V0U3RhdGUoKVwiXHJcbiAgICAgICAgICAgICAgIFtnYW1lSURdPVwiZ2FtZUlEXCJcclxuICAgICAgICAgICAgICAgW3BsYXllcklEXT1cInBsYXllcklEXCJcclxuICAgICAgICAgICAgICAgW2lzTXVsdGlwbGF5ZXJdPVwibXVsdGlwbGF5ZXIgIT09IHVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgIFttb3Zlc109XCJjbGllbnQubW92ZXNcIlxyXG4gICAgICAgICAgICAgICBbZXZlbnRzXT1cImNsaWVudC5ldmVudHNcIlxyXG4gICAgICAgICAgICAgICBbc3RvcmVdPVwiY2xpZW50LnN0b3JlXCJcclxuICAgICAgICAgICAgICAgW3N0ZXBdPVwiY2xpZW50LnN0ZXBcIlxyXG4gICAgICAgICAgICAgICBbcmVzZXRdPVwiY2xpZW50LnJlc2V0XCJcclxuICAgICAgICAgICAgICAgW3JlZHVjZXJdPVwiY2xpZW50LnJlZHVjZXJcIlxyXG4gICAgPjwvYmlvLWRlYnVnPlxyXG4gIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIENsaWVudENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBBZnRlckNvbnRlbnRJbml0IHtcclxuXHJcbiAgLy8gY2xhc3MgaW5wdXRzIChwb3NzaWJsZSBtb3ZlIHRvIGhpZ2hlciBsZXZlbCBpbml0aWFsaXphdGlvbiAoZS5nLiwgY2xhc3MgZmFjdG9yeSlcclxuICBASW5wdXQoKSBnYW1lOiBhbnk7XHJcbiAgQElucHV0KCkgbnVtUGxheWVyczogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIGJvYXJkOiBhbnk7XHJcbiAgQElucHV0KCkgbXVsdGlwbGF5ZXI6IGFueTtcclxuICBASW5wdXQoKSBhaTogYW55O1xyXG4gIEBJbnB1dCgpIGVuaGFuY2VyOiBhbnk7XHJcblxyXG4gIC8vIGluc3RhbmNlIGlucHV0c1xyXG4gIEBJbnB1dCgpIGdhbWVJRCA9ICdkZWZhdWx0JztcclxuICBASW5wdXQoKSBwbGF5ZXJJRDogc3RyaW5nID0gbnVsbDtcclxuICBASW5wdXQoKSBjcmVkZW50aWFsczogc3RyaW5nID0gbnVsbDsgLy8gVE9ETyB0aGlzXHJcblxyXG4gIC8vIG92ZXJyaWRhYmxlIGlucHV0cyAoYm90aCBjbGFzcyBhbmQgaW5zdGFuY2UpXHJcbiAgQElucHV0KCkgZGVidWcgPSB0cnVlO1xyXG5cclxuICBjbGllbnQ6IGFueTtcclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLmNsaWVudCA9IFJhd0NsaWVudCh7XHJcbiAgICAgIGdhbWU6IHRoaXMuZ2FtZSxcclxuICAgICAgYWk6IHRoaXMuYWksXHJcbiAgICAgIG51bVBsYXllcnM6IHRoaXMubnVtUGxheWVycyxcclxuICAgICAgbXVsdGlwbGF5ZXI6IHRoaXMubXVsdGlwbGF5ZXIsXHJcbiAgICAgIGdhbWVJRDogdGhpcy5nYW1lSUQsXHJcbiAgICAgIHBsYXllcklEOiB0aGlzLnBsYXllcklELFxyXG4gICAgICBjcmVkZW50aWFsczogdGhpcy5jcmVkZW50aWFscyxcclxuICAgICAgZW5oYW5jZXI6IHRoaXMuZW5oYW5jZXIsXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyB0b2RvIGlzIHRoaXMgbmVlZGVkPyAoZm9yY2VVcGRhdGUgb24gcmVhY3QpXHJcbiAgICAvLyB0aGlzLmNsaWVudC5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgLy8gICBjb25zb2xlLmxvZygnY2xpZW50LnN1YnNjcmliZSB0cmlnZ2VyZWQgKGZvcmNlVXBkYXRlIG5lZWRlZD8pJyk7XHJcbiAgICAvLyB9KTtcclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgIGlmICh0aGlzLmNsaWVudCkge1xyXG4gICAgICAvLyBub2luc3BlY3Rpb24gVHNMaW50XHJcbiAgICAgIGlmIChjaGFuZ2VzLmdhbWVJRCAmJiBjaGFuZ2VzLmdhbWVJRC5jdXJyZW50VmFsdWUgIT0gY2hhbmdlcy5nYW1lSUQucHJldmlvdXNWYWx1ZSkge1xyXG4gICAgICAgIHRoaXMuY2xpZW50LnVwZGF0ZUdhbWVJRChjaGFuZ2VzLmdhbWVJRC5jdXJyZW50VmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIG5vaW5zcGVjdGlvbiBUc0xpbnRcclxuICAgICAgaWYgKGNoYW5nZXMucGxheWVySUQgJiYgY2hhbmdlcy5wbGF5ZXJJRC5jdXJyZW50VmFsdWUgIT0gY2hhbmdlcy5wbGF5ZXJJRC5wcmV2aW91c1ZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5jbGllbnQudXBkYXRlUGxheWVySUQoY2hhbmdlcy5wbGF5ZXJJRC5jdXJyZW50VmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIG5vaW5zcGVjdGlvbiBUc0xpbnRcclxuICAgICAgaWYgKGNoYW5nZXMuY3JlZGVudGlhbHMgJiYgY2hhbmdlcy5jcmVkZW50aWFscy5jdXJyZW50VmFsdWUgIT0gY2hhbmdlcy5jcmVkZW50aWFscy5wcmV2aW91c1ZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5jbGllbnQudXBkYXRlQ3JlZGVudGlhbHMoY2hhbmdlcy5jcmVkZW50aWFscy5jdXJyZW50VmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XHJcbiAgICB0aGlzLmNsaWVudC5jb25uZWN0KCk7XHJcbiAgfVxyXG5cclxuICBnZXRCb2FyZElucHV0cygpIHtcclxuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5jbGllbnQuZ2V0U3RhdGUoKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIC4uLnN0YXRlLFxyXG4gICAgICBpc011bHRpcGxheWVyOiB0aGlzLm11bHRpcGxheWVyICE9PSB1bmRlZmluZWQsXHJcbiAgICAgIG1vdmVzOiB0aGlzLmNsaWVudC5tb3ZlcyxcclxuICAgICAgZXZlbnRzOiB0aGlzLmNsaWVudC5ldmVudHMsXHJcbiAgICAgIGdhbWVJRDogdGhpcy5nYW1lSUQsXHJcbiAgICAgIHBsYXllcklEOiB0aGlzLnBsYXllcklELFxyXG4gICAgICByZXNldDogdGhpcy5jbGllbnQucmVzZXQsXHJcbiAgICAgIHVuZG86IHRoaXMuY2xpZW50LnVuZG8sXHJcbiAgICAgIHJlZG86IHRoaXMuY2xpZW50LnJlZG8sXHJcbiAgICB9O1xyXG5cclxuICB9XHJcblxyXG59XHJcbiJdfQ==