(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('boardgame.io/dist/client'), require('react'), require('react-dom'), require('boardgame.io/dist/react'), require('uuid'), require('@angular/common'), require('ng-dynamic-component')) :
    typeof define === 'function' && define.amd ? define('boardgame.io-angular', ['exports', '@angular/core', 'boardgame.io/dist/client', 'react', 'react-dom', 'boardgame.io/dist/react', 'uuid', '@angular/common', 'ng-dynamic-component'], factory) :
    (factory((global.boardgame = global.boardgame || {}, global.boardgame['io-angular'] = {}),global.ng.core,null,null,null,null,null,global.ng.common,null));
}(this, (function (exports,core,client,React,ReactDOM,react,uuid,common,ngDynamicComponent) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ClientComponent = (function () {
        function ClientComponent() {
            // instance inputs
            this.gameID = 'default';
            this.playerID = null;
            this.credentials = null;
            // overridable inputs (both class and instance)
            this.debug = true;
        }
        /**
         * @return {?}
         */
        ClientComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.client = client.Client({
                    game: this.game,
                    ai: this.ai,
                    numPlayers: this.numPlayers,
                    multiplayer: this.multiplayer,
                    gameID: this.gameID,
                    playerID: this.playerID,
                    credentials: this.credentials,
                    enhancer: this.enhancer,
                });
                // todo is this needed? (forceUpdate on react)
                // this.client.subscribe(() => {
                //   console.log('client.subscribe triggered (forceUpdate needed?)');
                // });
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        ClientComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (this.client) {
                    // noinspection TsLint
                    if (changes["gameID"] && changes["gameID"].currentValue != changes["gameID"].previousValue) {
                        this.client.updateGameID(changes["gameID"].currentValue);
                    }
                    // noinspection TsLint
                    if (changes["playerID"] && changes["playerID"].currentValue != changes["playerID"].previousValue) {
                        this.client.updatePlayerID(changes["playerID"].currentValue);
                    }
                    // noinspection TsLint
                    if (changes["credentials"] && changes["credentials"].currentValue != changes["credentials"].previousValue) {
                        this.client.updateCredentials(changes["credentials"].currentValue);
                    }
                }
            };
        /**
         * @return {?}
         */
        ClientComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.client.connect();
            };
        /**
         * @return {?}
         */
        ClientComponent.prototype.getBoardInputs = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ state = this.client.getState();
                return __assign({}, state, { isMultiplayer: this.multiplayer !== undefined, moves: this.client.moves, events: this.client.events, gameID: this.gameID, playerID: this.playerID, reset: this.client.reset, undo: this.client.undo, redo: this.client.redo });
            };
        ClientComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'bio-client',
                        template: "\n    <ng-container *ngIf=\"client\">\n      <ng-container *ngComponentOutlet=\"board;\n                                            ndcDynamicInputs: getBoardInputs()\">\n      </ng-container>\n    </ng-container>\n\n    <bio-debug *ngIf=\"debug && client\"\n               [gamestate]=\"client.getState()\"\n               [gameID]=\"gameID\"\n               [playerID]=\"playerID\"\n               [isMultiplayer]=\"multiplayer !== undefined\"\n               [moves]=\"client.moves\"\n               [events]=\"client.events\"\n               [store]=\"client.store\"\n               [step]=\"client.step\"\n               [reset]=\"client.reset\"\n               [reducer]=\"client.reducer\"\n    ></bio-debug>\n  "
                    },] },
        ];
        ClientComponent.propDecorators = {
            game: [{ type: core.Input }],
            numPlayers: [{ type: core.Input }],
            board: [{ type: core.Input }],
            multiplayer: [{ type: core.Input }],
            ai: [{ type: core.Input }],
            enhancer: [{ type: core.Input }],
            gameID: [{ type: core.Input }],
            playerID: [{ type: core.Input }],
            credentials: [{ type: core.Input }],
            debug: [{ type: core.Input }]
        };
        return ClientComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DebugComponent = (function () {
        function DebugComponent() {
        }
        /**
         * @return {?}
         */
        DebugComponent.prototype.getRootDomNode = /**
         * @return {?}
         */
            function () {
                return document.getElementById(this.rootDomID);
            };
        /**
         * @return {?}
         */
        DebugComponent.prototype.getProps = /**
         * @return {?}
         */
            function () {
                var _a = this, gamestate = _a.gamestate, gameID = _a.gameID, playerID = _a.playerID, isConnected = _a.isConnected, isMultiplayer = _a.isMultiplayer, moves = _a.moves, events = _a.events, restore = _a.restore, showLog = _a.showLog, store = _a.store, step = _a.step, reset = _a.reset, reducer = _a.reducer, overrideGameState = _a.overrideGameState, visualizeAI = _a.visualizeAI;
                return {
                    gamestate: gamestate,
                    gameID: gameID,
                    playerID: playerID,
                    isConnected: isConnected,
                    isMultiplayer: isMultiplayer,
                    moves: moves,
                    events: events,
                    restore: restore,
                    showLog: showLog,
                    store: store,
                    step: step,
                    reset: reset,
                    reducer: reducer,
                    overrideGameState: overrideGameState,
                    visualizeAI: visualizeAI,
                };
            };
        /**
         * @return {?}
         */
        DebugComponent.prototype.isMounted = /**
         * @return {?}
         */
            function () {
                return !!this.rootDomID;
            };
        /**
         * @return {?}
         */
        DebugComponent.prototype.render = /**
         * @return {?}
         */
            function () {
                if (this.isMounted()) {
                    ReactDOM.render(React.createElement(react.Debug, this.getProps()), this.getRootDomNode());
                }
            };
        /**
         * @return {?}
         */
        DebugComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.rootDomID = uuid.v1();
            };
        /**
         * @return {?}
         */
        DebugComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.render();
            };
        /**
         * @return {?}
         */
        DebugComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.render();
            };
        /**
         * @return {?}
         */
        DebugComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                ReactDOM.unmountComponentAtNode(this.getRootDomNode());
            };
        DebugComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'bio-debug',
                        template: '<span [id]="rootDomID"></span>'
                    },] },
        ];
        DebugComponent.propDecorators = {
            gamestate: [{ type: core.Input }],
            gameID: [{ type: core.Input }],
            playerID: [{ type: core.Input }],
            isConnected: [{ type: core.Input }],
            isMultiplayer: [{ type: core.Input }],
            moves: [{ type: core.Input }],
            events: [{ type: core.Input }],
            restore: [{ type: core.Input }],
            showLog: [{ type: core.Input }],
            store: [{ type: core.Input }],
            step: [{ type: core.Input }],
            reset: [{ type: core.Input }],
            reducer: [{ type: core.Input }],
            overrideGameState: [{ type: core.Input }],
            visualizeAI: [{ type: core.Input }]
        };
        return DebugComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var BoardgameIoModule = (function () {
        function BoardgameIoModule() {
        }
        BoardgameIoModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            ngDynamicComponent.DynamicModule.withComponents(null),
                        ],
                        declarations: [ClientComponent, DebugComponent],
                        exports: [ClientComponent]
                    },] },
        ];
        return BoardgameIoModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.ClientComponent = ClientComponent;
    exports.BoardgameIoModule = BoardgameIoModule;
    exports.ɵa = DebugComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,