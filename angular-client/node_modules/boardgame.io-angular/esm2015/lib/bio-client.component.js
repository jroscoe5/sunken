/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { Client as RawClient } from 'boardgame.io/dist/client';
export class ClientComponent {
    constructor() {
        // instance inputs
        this.gameID = 'default';
        this.playerID = null;
        this.credentials = null;
        // overridable inputs (both class and instance)
        this.debug = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.client = RawClient({
            game: this.game,
            ai: this.ai,
            numPlayers: this.numPlayers,
            multiplayer: this.multiplayer,
            gameID: this.gameID,
            playerID: this.playerID,
            credentials: this.credentials,
            enhancer: this.enhancer,
        });
        // todo is this needed? (forceUpdate on react)
        // this.client.subscribe(() => {
        //   console.log('client.subscribe triggered (forceUpdate needed?)');
        // });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.client) {
            // noinspection TsLint
            if (changes["gameID"] && changes["gameID"].currentValue != changes["gameID"].previousValue) {
                this.client.updateGameID(changes["gameID"].currentValue);
            }
            // noinspection TsLint
            if (changes["playerID"] && changes["playerID"].currentValue != changes["playerID"].previousValue) {
                this.client.updatePlayerID(changes["playerID"].currentValue);
            }
            // noinspection TsLint
            if (changes["credentials"] && changes["credentials"].currentValue != changes["credentials"].previousValue) {
                this.client.updateCredentials(changes["credentials"].currentValue);
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.client.connect();
    }
    /**
     * @return {?}
     */
    getBoardInputs() {
        const /** @type {?} */ state = this.client.getState();
        return Object.assign({}, state, { isMultiplayer: this.multiplayer !== undefined, moves: this.client.moves, events: this.client.events, gameID: this.gameID, playerID: this.playerID, reset: this.client.reset, undo: this.client.undo, redo: this.client.redo });
    }
}
ClientComponent.decorators = [
    { type: Component, args: [{
                selector: 'bio-client',
                template: `
    <ng-container *ngIf="client">
      <ng-container *ngComponentOutlet="board;
                                            ndcDynamicInputs: getBoardInputs()">
      </ng-container>
    </ng-container>

    <bio-debug *ngIf="debug && client"
               [gamestate]="client.getState()"
               [gameID]="gameID"
               [playerID]="playerID"
               [isMultiplayer]="multiplayer !== undefined"
               [moves]="client.moves"
               [events]="client.events"
               [store]="client.store"
               [step]="client.step"
               [reset]="client.reset"
               [reducer]="client.reducer"
    ></bio-debug>
  `
            },] },
];
ClientComponent.propDecorators = {
    game: [{ type: Input }],
    numPlayers: [{ type: Input }],
    board: [{ type: Input }],
    multiplayer: [{ type: Input }],
    ai: [{ type: Input }],
    enhancer: [{ type: Input }],
    gameID: [{ type: Input }],
    playerID: [{ type: Input }],
    credentials: [{ type: Input }],
    debug: [{ type: Input }]
};
function ClientComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    ClientComponent.prototype.game;
    /** @type {?} */
    ClientComponent.prototype.numPlayers;
    /** @type {?} */
    ClientComponent.prototype.board;
    /** @type {?} */
    ClientComponent.prototype.multiplayer;
    /** @type {?} */
    ClientComponent.prototype.ai;
    /** @type {?} */
    ClientComponent.prototype.enhancer;
    /** @type {?} */
    ClientComponent.prototype.gameID;
    /** @type {?} */
    ClientComponent.prototype.playerID;
    /** @type {?} */
    ClientComponent.prototype.credentials;
    /** @type {?} */
    ClientComponent.prototype.debug;
    /** @type {?} */
    ClientComponent.prototype.client;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlvLWNsaWVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9ib2FyZGdhbWUuaW8tYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9iaW8tY2xpZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFvQixTQUFTLEVBQUUsS0FBSyxFQUFvQyxNQUFNLGVBQWUsQ0FBQztBQUNyRyxPQUFPLEVBQUUsTUFBTSxJQUFJLFNBQVMsRUFBUyxNQUFNLDBCQUEwQixDQUFDO0FBeUJ0RSxNQUFNOzs7c0JBV2MsU0FBUzt3QkFDQyxJQUFJOzJCQUNELElBQUk7O3FCQUdsQixJQUFJOzs7OztJQUlyQixRQUFRO1FBQ04sSUFBSSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7WUFDdEIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ1gsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzNCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7U0FDeEIsQ0FBQyxDQUFDOzs7OztLQU1KOzs7OztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs7WUFFaEIsRUFBRSxDQUFDLENBQUMsT0FBTyxjQUFXLE9BQU8sV0FBUSxZQUFZLElBQUksT0FBTyxXQUFRLGFBQWEsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xGLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sV0FBUSxZQUFZLENBQUMsQ0FBQzthQUN2RDs7WUFFRCxFQUFFLENBQUMsQ0FBQyxPQUFPLGdCQUFhLE9BQU8sYUFBVSxZQUFZLElBQUksT0FBTyxhQUFVLGFBQWEsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hGLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sYUFBVSxZQUFZLENBQUMsQ0FBQzthQUMzRDs7WUFFRCxFQUFFLENBQUMsQ0FBQyxPQUFPLG1CQUFnQixPQUFPLGdCQUFhLFlBQVksSUFBSSxPQUFPLGdCQUFhLGFBQWEsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pHLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsT0FBTyxnQkFBYSxZQUFZLENBQUMsQ0FBQzthQUNqRTtTQUNGO0tBQ0Y7Ozs7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUN2Qjs7OztJQUVELGNBQWM7UUFDWix1QkFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNyQyxNQUFNLG1CQUNELEtBQUssSUFDUixhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQzdDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFDeEIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUMxQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFDbkIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQ3ZCLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFDeEIsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUN0QixJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQ3RCO0tBRUg7OztZQWhHRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFlBQVk7Z0JBQ3RCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CVDthQUNGOzs7bUJBSUUsS0FBSzt5QkFDTCxLQUFLO29CQUNMLEtBQUs7MEJBQ0wsS0FBSztpQkFDTCxLQUFLO3VCQUNMLEtBQUs7cUJBR0wsS0FBSzt1QkFDTCxLQUFLOzBCQUNMLEtBQUs7b0JBR0wsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIENvbXBvbmVudCwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENsaWVudCBhcyBSYXdDbGllbnQsIERlYnVnIH0gZnJvbSAnYm9hcmRnYW1lLmlvL2Rpc3QvY2xpZW50JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYmlvLWNsaWVudCcsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJjbGllbnRcIj5cclxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdDb21wb25lbnRPdXRsZXQ9XCJib2FyZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZGNEeW5hbWljSW5wdXRzOiBnZXRCb2FyZElucHV0cygpXCI+XHJcbiAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgPC9uZy1jb250YWluZXI+XHJcblxyXG4gICAgPGJpby1kZWJ1ZyAqbmdJZj1cImRlYnVnICYmIGNsaWVudFwiXHJcbiAgICAgICAgICAgICAgIFtnYW1lc3RhdGVdPVwiY2xpZW50LmdldFN0YXRlKClcIlxyXG4gICAgICAgICAgICAgICBbZ2FtZUlEXT1cImdhbWVJRFwiXHJcbiAgICAgICAgICAgICAgIFtwbGF5ZXJJRF09XCJwbGF5ZXJJRFwiXHJcbiAgICAgICAgICAgICAgIFtpc011bHRpcGxheWVyXT1cIm11bHRpcGxheWVyICE9PSB1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICBbbW92ZXNdPVwiY2xpZW50Lm1vdmVzXCJcclxuICAgICAgICAgICAgICAgW2V2ZW50c109XCJjbGllbnQuZXZlbnRzXCJcclxuICAgICAgICAgICAgICAgW3N0b3JlXT1cImNsaWVudC5zdG9yZVwiXHJcbiAgICAgICAgICAgICAgIFtzdGVwXT1cImNsaWVudC5zdGVwXCJcclxuICAgICAgICAgICAgICAgW3Jlc2V0XT1cImNsaWVudC5yZXNldFwiXHJcbiAgICAgICAgICAgICAgIFtyZWR1Y2VyXT1cImNsaWVudC5yZWR1Y2VyXCJcclxuICAgID48L2Jpby1kZWJ1Zz5cclxuICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDbGllbnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgQWZ0ZXJDb250ZW50SW5pdCB7XHJcblxyXG4gIC8vIGNsYXNzIGlucHV0cyAocG9zc2libGUgbW92ZSB0byBoaWdoZXIgbGV2ZWwgaW5pdGlhbGl6YXRpb24gKGUuZy4sIGNsYXNzIGZhY3RvcnkpXHJcbiAgQElucHV0KCkgZ2FtZTogYW55O1xyXG4gIEBJbnB1dCgpIG51bVBsYXllcnM6IG51bWJlcjtcclxuICBASW5wdXQoKSBib2FyZDogYW55O1xyXG4gIEBJbnB1dCgpIG11bHRpcGxheWVyOiBhbnk7XHJcbiAgQElucHV0KCkgYWk6IGFueTtcclxuICBASW5wdXQoKSBlbmhhbmNlcjogYW55O1xyXG5cclxuICAvLyBpbnN0YW5jZSBpbnB1dHNcclxuICBASW5wdXQoKSBnYW1lSUQgPSAnZGVmYXVsdCc7XHJcbiAgQElucHV0KCkgcGxheWVySUQ6IHN0cmluZyA9IG51bGw7XHJcbiAgQElucHV0KCkgY3JlZGVudGlhbHM6IHN0cmluZyA9IG51bGw7IC8vIFRPRE8gdGhpc1xyXG5cclxuICAvLyBvdmVycmlkYWJsZSBpbnB1dHMgKGJvdGggY2xhc3MgYW5kIGluc3RhbmNlKVxyXG4gIEBJbnB1dCgpIGRlYnVnID0gdHJ1ZTtcclxuXHJcbiAgY2xpZW50OiBhbnk7XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5jbGllbnQgPSBSYXdDbGllbnQoe1xyXG4gICAgICBnYW1lOiB0aGlzLmdhbWUsXHJcbiAgICAgIGFpOiB0aGlzLmFpLFxyXG4gICAgICBudW1QbGF5ZXJzOiB0aGlzLm51bVBsYXllcnMsXHJcbiAgICAgIG11bHRpcGxheWVyOiB0aGlzLm11bHRpcGxheWVyLFxyXG4gICAgICBnYW1lSUQ6IHRoaXMuZ2FtZUlELFxyXG4gICAgICBwbGF5ZXJJRDogdGhpcy5wbGF5ZXJJRCxcclxuICAgICAgY3JlZGVudGlhbHM6IHRoaXMuY3JlZGVudGlhbHMsXHJcbiAgICAgIGVuaGFuY2VyOiB0aGlzLmVuaGFuY2VyLFxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gdG9kbyBpcyB0aGlzIG5lZWRlZD8gKGZvcmNlVXBkYXRlIG9uIHJlYWN0KVxyXG4gICAgLy8gdGhpcy5jbGllbnQuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgIC8vICAgY29uc29sZS5sb2coJ2NsaWVudC5zdWJzY3JpYmUgdHJpZ2dlcmVkIChmb3JjZVVwZGF0ZSBuZWVkZWQ/KScpO1xyXG4gICAgLy8gfSk7XHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICBpZiAodGhpcy5jbGllbnQpIHtcclxuICAgICAgLy8gbm9pbnNwZWN0aW9uIFRzTGludFxyXG4gICAgICBpZiAoY2hhbmdlcy5nYW1lSUQgJiYgY2hhbmdlcy5nYW1lSUQuY3VycmVudFZhbHVlICE9IGNoYW5nZXMuZ2FtZUlELnByZXZpb3VzVmFsdWUpIHtcclxuICAgICAgICB0aGlzLmNsaWVudC51cGRhdGVHYW1lSUQoY2hhbmdlcy5nYW1lSUQuY3VycmVudFZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgICAvLyBub2luc3BlY3Rpb24gVHNMaW50XHJcbiAgICAgIGlmIChjaGFuZ2VzLnBsYXllcklEICYmIGNoYW5nZXMucGxheWVySUQuY3VycmVudFZhbHVlICE9IGNoYW5nZXMucGxheWVySUQucHJldmlvdXNWYWx1ZSkge1xyXG4gICAgICAgIHRoaXMuY2xpZW50LnVwZGF0ZVBsYXllcklEKGNoYW5nZXMucGxheWVySUQuY3VycmVudFZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgICAvLyBub2luc3BlY3Rpb24gVHNMaW50XHJcbiAgICAgIGlmIChjaGFuZ2VzLmNyZWRlbnRpYWxzICYmIGNoYW5nZXMuY3JlZGVudGlhbHMuY3VycmVudFZhbHVlICE9IGNoYW5nZXMuY3JlZGVudGlhbHMucHJldmlvdXNWYWx1ZSkge1xyXG4gICAgICAgIHRoaXMuY2xpZW50LnVwZGF0ZUNyZWRlbnRpYWxzKGNoYW5nZXMuY3JlZGVudGlhbHMuY3VycmVudFZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xyXG4gICAgdGhpcy5jbGllbnQuY29ubmVjdCgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Qm9hcmRJbnB1dHMoKSB7XHJcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuY2xpZW50LmdldFN0YXRlKCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi5zdGF0ZSxcclxuICAgICAgaXNNdWx0aXBsYXllcjogdGhpcy5tdWx0aXBsYXllciAhPT0gdW5kZWZpbmVkLFxyXG4gICAgICBtb3ZlczogdGhpcy5jbGllbnQubW92ZXMsXHJcbiAgICAgIGV2ZW50czogdGhpcy5jbGllbnQuZXZlbnRzLFxyXG4gICAgICBnYW1lSUQ6IHRoaXMuZ2FtZUlELFxyXG4gICAgICBwbGF5ZXJJRDogdGhpcy5wbGF5ZXJJRCxcclxuICAgICAgcmVzZXQ6IHRoaXMuY2xpZW50LnJlc2V0LFxyXG4gICAgICB1bmRvOiB0aGlzLmNsaWVudC51bmRvLFxyXG4gICAgICByZWRvOiB0aGlzLmNsaWVudC5yZWRvLFxyXG4gICAgfTtcclxuXHJcbiAgfVxyXG5cclxufVxyXG4iXX0=