!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("boardgame.io/dist/client"),require("react"),require("react-dom"),require("boardgame.io/dist/react"),require("uuid"),require("@angular/common"),require("ng-dynamic-component")):"function"==typeof define&&define.amd?define("boardgame.io-angular",["exports","@angular/core","boardgame.io/dist/client","react","react-dom","boardgame.io/dist/react","uuid","@angular/common","ng-dynamic-component"],t):t((e.boardgame=e.boardgame||{},e.boardgame["io-angular"]={}),e.ng.core,null,null,null,null,null,e.ng.common,null)}(this,function(e,t,n,r,o,i,a,u,s){"use strict";var l=function(){function e(){this.gameID="default",this.playerID=null,this.credentials=null,this.debug=!0}return e.prototype.ngOnInit=function(){this.client=n.Client({game:this.game,ai:this.ai,numPlayers:this.numPlayers,multiplayer:this.multiplayer,gameID:this.gameID,playerID:this.playerID,credentials:this.credentials,enhancer:this.enhancer})},e.prototype.ngOnChanges=function(e){this.client&&(e.gameID&&e.gameID.currentValue!=e.gameID.previousValue&&this.client.updateGameID(e.gameID.currentValue),e.playerID&&e.playerID.currentValue!=e.playerID.previousValue&&this.client.updatePlayerID(e.playerID.currentValue),e.credentials&&e.credentials.currentValue!=e.credentials.previousValue&&this.client.updateCredentials(e.credentials.currentValue))},e.prototype.ngAfterContentInit=function(){this.client.connect()},e.prototype.getBoardInputs=function(){return function(){return p=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},p.apply(this,arguments)}({},this.client.getState(),{isMultiplayer:this.multiplayer!==undefined,moves:this.client.moves,events:this.client.events,gameID:this.gameID,playerID:this.playerID,reset:this.client.reset,undo:this.client.undo,redo:this.client.redo})},e.decorators=[{type:t.Component,args:[{selector:"bio-client",template:'\n    <ng-container *ngIf="client">\n      <ng-container *ngComponentOutlet="board;\n                                            ndcDynamicInputs: getBoardInputs()">\n      </ng-container>\n    </ng-container>\n\n    <bio-debug *ngIf="debug && client"\n               [gamestate]="client.getState()"\n               [gameID]="gameID"\n               [playerID]="playerID"\n               [isMultiplayer]="multiplayer !== undefined"\n               [moves]="client.moves"\n               [events]="client.events"\n               [store]="client.store"\n               [step]="client.step"\n               [reset]="client.reset"\n               [reducer]="client.reducer"\n    ></bio-debug>\n  '}]}],e.propDecorators={game:[{type:t.Input}],numPlayers:[{type:t.Input}],board:[{type:t.Input}],multiplayer:[{type:t.Input}],ai:[{type:t.Input}],enhancer:[{type:t.Input}],gameID:[{type:t.Input}],playerID:[{type:t.Input}],credentials:[{type:t.Input}],debug:[{type:t.Input}]},e}(),c=function(){function e(){}return e.prototype.getRootDomNode=function(){return document.getElementById(this.rootDomID)},e.prototype.getProps=function(){var e=this;return{gamestate:e.gamestate,gameID:e.gameID,playerID:e.playerID,isConnected:e.isConnected,isMultiplayer:e.isMultiplayer,moves:e.moves,events:e.events,restore:e.restore,showLog:e.showLog,store:e.store,step:e.step,reset:e.reset,reducer:e.reducer,overrideGameState:e.overrideGameState,visualizeAI:e.visualizeAI}},e.prototype.isMounted=function(){return!!this.rootDomID},e.prototype.render=function(){this.isMounted()&&o.render(r.createElement(i.Debug,this.getProps()),this.getRootDomNode())},e.prototype.ngOnInit=function(){this.rootDomID=a.v1()},e.prototype.ngOnChanges=function(){this.render()},e.prototype.ngAfterViewInit=function(){this.render()},e.prototype.ngOnDestroy=function(){o.unmountComponentAtNode(this.getRootDomNode())},e.decorators=[{type:t.Component,args:[{selector:"bio-debug",template:'<span [id]="rootDomID"></span>'}]}],e.propDecorators={gamestate:[{type:t.Input}],gameID:[{type:t.Input}],playerID:[{type:t.Input}],isConnected:[{type:t.Input}],isMultiplayer:[{type:t.Input}],moves:[{type:t.Input}],events:[{type:t.Input}],restore:[{type:t.Input}],showLog:[{type:t.Input}],store:[{type:t.Input}],step:[{type:t.Input}],reset:[{type:t.Input}],reducer:[{type:t.Input}],overrideGameState:[{type:t.Input}],visualizeAI:[{type:t.Input}]},e}(),d=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{imports:[u.CommonModule,s.DynamicModule.withComponents(null)],declarations:[l,c],exports:[l]}]}],e}();e.ClientComponent=l,e.BoardgameIoModule=d,e.Éµa=c,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=boardgame.io-angular.umd.min.js.map