/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { Debug } from 'boardgame.io/dist/react';
import * as uuid from 'uuid';
import { Component, Input } from '@angular/core';
/**
 * @record
 */
export function GameState() { }
function GameState_tsickle_Closure_declarations() {
    /** @type {?} */
    GameState.prototype.G;
    /** @type {?} */
    GameState.prototype.ctx;
    /** @type {?} */
    GameState.prototype.log;
    /** @type {?|undefined} */
    GameState.prototype.isActive;
    /** @type {?} */
    GameState.prototype._initial;
}
/**
 * @record
 */
export function DebugProps() { }
function DebugProps_tsickle_Closure_declarations() {
    /** @type {?} */
    DebugProps.prototype.gamestate;
    /** @type {?} */
    DebugProps.prototype.gameID;
    /** @type {?|undefined} */
    DebugProps.prototype.playerID;
    /** @type {?|undefined} */
    DebugProps.prototype.isConnected;
    /** @type {?|undefined} */
    DebugProps.prototype.isMultiplayer;
    /** @type {?|undefined} */
    DebugProps.prototype.moves;
    /** @type {?|undefined} */
    DebugProps.prototype.events;
    /** @type {?|undefined} */
    DebugProps.prototype.restore;
    /** @type {?|undefined} */
    DebugProps.prototype.showLog;
    /** @type {?|undefined} */
    DebugProps.prototype.store;
    /** @type {?|undefined} */
    DebugProps.prototype.step;
    /** @type {?|undefined} */
    DebugProps.prototype.reset;
    /** @type {?|undefined} */
    DebugProps.prototype.reducer;
    /** @type {?|undefined} */
    DebugProps.prototype.overrideGameState;
    /** @type {?|undefined} */
    DebugProps.prototype.visualizeAI;
}
export class DebugComponent {
    /**
     * @return {?}
     */
    getRootDomNode() {
        return document.getElementById(this.rootDomID);
    }
    /**
     * @return {?}
     */
    getProps() {
        const { gamestate, gameID, playerID, isConnected, isMultiplayer, moves, events, restore, showLog, store, step, reset, reducer, overrideGameState, visualizeAI, } = this;
        return {
            gamestate,
            gameID,
            playerID,
            isConnected,
            isMultiplayer,
            moves,
            events,
            restore,
            showLog,
            store,
            step,
            reset,
            reducer,
            overrideGameState,
            visualizeAI,
        };
    }
    /**
     * @return {?}
     */
    isMounted() {
        return !!this.rootDomID;
    }
    /**
     * @return {?}
     */
    render() {
        if (this.isMounted()) {
            ReactDOM.render(React.createElement(Debug, this.getProps()), this.getRootDomNode());
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.rootDomID = uuid.v1();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.render();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.render();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        ReactDOM.unmountComponentAtNode(this.getRootDomNode());
    }
}
DebugComponent.decorators = [
    { type: Component, args: [{
                selector: 'bio-debug',
                template: '<span [id]="rootDomID"></span>'
            },] },
];
DebugComponent.propDecorators = {
    gamestate: [{ type: Input }],
    gameID: [{ type: Input }],
    playerID: [{ type: Input }],
    isConnected: [{ type: Input }],
    isMultiplayer: [{ type: Input }],
    moves: [{ type: Input }],
    events: [{ type: Input }],
    restore: [{ type: Input }],
    showLog: [{ type: Input }],
    store: [{ type: Input }],
    step: [{ type: Input }],
    reset: [{ type: Input }],
    reducer: [{ type: Input }],
    overrideGameState: [{ type: Input }],
    visualizeAI: [{ type: Input }]
};
function DebugComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    DebugComponent.prototype.gamestate;
    /** @type {?} */
    DebugComponent.prototype.gameID;
    /** @type {?} */
    DebugComponent.prototype.playerID;
    /** @type {?} */
    DebugComponent.prototype.isConnected;
    /** @type {?} */
    DebugComponent.prototype.isMultiplayer;
    /** @type {?} */
    DebugComponent.prototype.moves;
    /** @type {?} */
    DebugComponent.prototype.events;
    /** @type {?} */
    DebugComponent.prototype.restore;
    /** @type {?} */
    DebugComponent.prototype.showLog;
    /** @type {?} */
    DebugComponent.prototype.store;
    /** @type {?} */
    DebugComponent.prototype.step;
    /** @type {?} */
    DebugComponent.prototype.reset;
    /** @type {?} */
    DebugComponent.prototype.reducer;
    /** @type {?} */
    DebugComponent.prototype.overrideGameState;
    /** @type {?} */
    DebugComponent.prototype.visualizeAI;
    /** @type {?} */
    DebugComponent.prototype.rootDomID;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlvLWRlYnVnLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2JvYXJkZ2FtZS5pby1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2Jpby1kZWJ1Zy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sS0FBSyxRQUFRLE1BQU0sV0FBVyxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNoRCxPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUU3QixPQUFPLEVBQWlCLFNBQVMsRUFBRSxLQUFLLEVBQWdDLE1BQU0sZUFBZSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdDOUYsTUFBTTs7OztJQW1CTSxjQUFjO1FBQ3RCLE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUNoRDs7OztJQUVTLFFBQVE7UUFDaEIsTUFBTSxFQUNKLFNBQVMsRUFDVCxNQUFNLEVBQ04sUUFBUSxFQUNSLFdBQVcsRUFDWCxhQUFhLEVBQ2IsS0FBSyxFQUNMLE1BQU0sRUFDTixPQUFPLEVBQ1AsT0FBTyxFQUNQLEtBQUssRUFDTCxJQUFJLEVBQ0osS0FBSyxFQUNMLE9BQU8sRUFDUCxpQkFBaUIsRUFDakIsV0FBVyxHQUNaLEdBQUcsSUFBSSxDQUFDO1FBQ1QsTUFBTSxDQUFDO1lBQ0wsU0FBUztZQUNULE1BQU07WUFDTixRQUFRO1lBQ1IsV0FBVztZQUNYLGFBQWE7WUFDYixLQUFLO1lBQ0wsTUFBTTtZQUNOLE9BQU87WUFDUCxPQUFPO1lBQ1AsS0FBSztZQUNMLElBQUk7WUFDSixLQUFLO1lBQ0wsT0FBTztZQUNQLGlCQUFpQjtZQUNqQixXQUFXO1NBQ1osQ0FBQztLQUNIOzs7O0lBRU8sU0FBUztRQUNmLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQzs7Ozs7SUFHaEIsTUFBTTtRQUNkLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckIsUUFBUSxDQUFDLE1BQU0sQ0FDYixLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsRUFDM0MsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUN0QixDQUFDO1NBQ0g7S0FDRjs7OztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztLQUM1Qjs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7S0FDZjs7OztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7S0FDZjs7OztJQUVELFdBQVc7UUFDVCxRQUFRLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7S0FDeEQ7OztZQTNGRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLFFBQVEsRUFBRSxnQ0FBZ0M7YUFDM0M7Ozt3QkFFRSxLQUFLO3FCQUNMLEtBQUs7dUJBQ0wsS0FBSzswQkFDTCxLQUFLOzRCQUNMLEtBQUs7b0JBQ0wsS0FBSztxQkFDTCxLQUFLO3NCQUNMLEtBQUs7c0JBQ0wsS0FBSztvQkFDTCxLQUFLO21CQUNMLEtBQUs7b0JBQ0wsS0FBSztzQkFDTCxLQUFLO2dDQUNMLEtBQUs7MEJBQ0wsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHsgRGVidWcgfSBmcm9tICdib2FyZGdhbWUuaW8vZGlzdC9yZWFjdCc7XHJcbmltcG9ydCAqIGFzIHV1aWQgZnJvbSAndXVpZCc7XHJcblxyXG5pbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEdhbWVTdGF0ZSB7XHJcbiAgRzogYW55O1xyXG4gIGN0eDogYW55O1xyXG4gIGxvZzogYW55O1xyXG4gIGlzQWN0aXZlPzogYm9vbGVhbjtcclxuICBfaW5pdGlhbDogYW55O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERlYnVnUHJvcHMge1xyXG4gIGdhbWVzdGF0ZTogR2FtZVN0YXRlO1xyXG4gIGdhbWVJRDogc3RyaW5nO1xyXG4gIHBsYXllcklEPzogc3RyaW5nO1xyXG4gIGlzQ29ubmVjdGVkPzogYm9vbGVhbjtcclxuICBpc011bHRpcGxheWVyPzogYm9vbGVhbjtcclxuICBtb3Zlcz86IGFueTtcclxuICBldmVudHM/OiBhbnk7XHJcbiAgcmVzdG9yZT86IEZ1bmN0aW9uO1xyXG4gIHNob3dMb2c/OiBib29sZWFuO1xyXG4gIHN0b3JlPzogYW55O1xyXG4gIHN0ZXA/OiBGdW5jdGlvbjtcclxuICByZXNldD86IEZ1bmN0aW9uO1xyXG4gIHJlZHVjZXI/OiBGdW5jdGlvbjtcclxuICBvdmVycmlkZUdhbWVTdGF0ZT86IEZ1bmN0aW9uO1xyXG4gIHZpc3VhbGl6ZUFJPzogRnVuY3Rpb247XHJcbn1cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYmlvLWRlYnVnJyxcclxuICB0ZW1wbGF0ZTogJzxzcGFuIFtpZF09XCJyb290RG9tSURcIj48L3NwYW4+J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRGVidWdDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0IHtcclxuICBASW5wdXQoKSBnYW1lc3RhdGU6IEdhbWVTdGF0ZTtcclxuICBASW5wdXQoKSBnYW1lSUQ6IHN0cmluZztcclxuICBASW5wdXQoKSBwbGF5ZXJJRD86IHN0cmluZztcclxuICBASW5wdXQoKSBpc0Nvbm5lY3RlZD86IGJvb2xlYW47XHJcbiAgQElucHV0KCkgaXNNdWx0aXBsYXllcj86IGJvb2xlYW47XHJcbiAgQElucHV0KCkgbW92ZXM/OiBhbnk7XHJcbiAgQElucHV0KCkgZXZlbnRzPzogYW55O1xyXG4gIEBJbnB1dCgpIHJlc3RvcmU/OiBGdW5jdGlvbjtcclxuICBASW5wdXQoKSBzaG93TG9nPzogYm9vbGVhbjtcclxuICBASW5wdXQoKSBzdG9yZT86IGFueTtcclxuICBASW5wdXQoKSBzdGVwPzogRnVuY3Rpb247XHJcbiAgQElucHV0KCkgcmVzZXQ/OiBGdW5jdGlvbjtcclxuICBASW5wdXQoKSByZWR1Y2VyPzogRnVuY3Rpb247XHJcbiAgQElucHV0KCkgb3ZlcnJpZGVHYW1lU3RhdGU/OiBGdW5jdGlvbjtcclxuICBASW5wdXQoKSB2aXN1YWxpemVBST86IEZ1bmN0aW9uO1xyXG5cclxuICByb290RG9tSUQ6IHN0cmluZztcclxuXHJcbiAgcHJvdGVjdGVkIGdldFJvb3REb21Ob2RlKCkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMucm9vdERvbUlEKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBnZXRQcm9wcygpOiBEZWJ1Z1Byb3BzIHtcclxuICAgIGNvbnN0IHtcclxuICAgICAgZ2FtZXN0YXRlLFxyXG4gICAgICBnYW1lSUQsXHJcbiAgICAgIHBsYXllcklELFxyXG4gICAgICBpc0Nvbm5lY3RlZCxcclxuICAgICAgaXNNdWx0aXBsYXllcixcclxuICAgICAgbW92ZXMsXHJcbiAgICAgIGV2ZW50cyxcclxuICAgICAgcmVzdG9yZSxcclxuICAgICAgc2hvd0xvZyxcclxuICAgICAgc3RvcmUsXHJcbiAgICAgIHN0ZXAsXHJcbiAgICAgIHJlc2V0LFxyXG4gICAgICByZWR1Y2VyLFxyXG4gICAgICBvdmVycmlkZUdhbWVTdGF0ZSxcclxuICAgICAgdmlzdWFsaXplQUksXHJcbiAgICB9ID0gdGhpcztcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGdhbWVzdGF0ZSxcclxuICAgICAgZ2FtZUlELFxyXG4gICAgICBwbGF5ZXJJRCxcclxuICAgICAgaXNDb25uZWN0ZWQsXHJcbiAgICAgIGlzTXVsdGlwbGF5ZXIsXHJcbiAgICAgIG1vdmVzLFxyXG4gICAgICBldmVudHMsXHJcbiAgICAgIHJlc3RvcmUsXHJcbiAgICAgIHNob3dMb2csXHJcbiAgICAgIHN0b3JlLFxyXG4gICAgICBzdGVwLFxyXG4gICAgICByZXNldCxcclxuICAgICAgcmVkdWNlcixcclxuICAgICAgb3ZlcnJpZGVHYW1lU3RhdGUsXHJcbiAgICAgIHZpc3VhbGl6ZUFJLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXNNb3VudGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuICEhdGhpcy5yb290RG9tSUQ7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgcmVuZGVyKCkge1xyXG4gICAgaWYgKHRoaXMuaXNNb3VudGVkKCkpIHtcclxuICAgICAgUmVhY3RET00ucmVuZGVyKFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVidWcsIHRoaXMuZ2V0UHJvcHMoKSksXHJcbiAgICAgICAgdGhpcy5nZXRSb290RG9tTm9kZSgpXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMucm9vdERvbUlEID0gdXVpZC52MSgpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoKSB7XHJcbiAgICB0aGlzLnJlbmRlcigpO1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgdGhpcy5yZW5kZXIoKTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgUmVhY3RET00udW5tb3VudENvbXBvbmVudEF0Tm9kZSh0aGlzLmdldFJvb3REb21Ob2RlKCkpO1xyXG4gIH1cclxufVxyXG4iXX0=