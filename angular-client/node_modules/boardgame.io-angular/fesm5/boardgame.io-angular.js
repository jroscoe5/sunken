import { __assign } from 'tslib';
import { Component, Input, NgModule } from '@angular/core';
import { Client } from 'boardgame.io/dist/client';
import { createElement } from 'react';
import { render, unmountComponentAtNode } from 'react-dom';
import { Debug } from 'boardgame.io/dist/react';
import { v1 } from 'uuid';
import { CommonModule } from '@angular/common';
import { DynamicModule } from 'ng-dynamic-component';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ClientComponent = /** @class */ (function () {
    function ClientComponent() {
        // instance inputs
        this.gameID = 'default';
        this.playerID = null;
        this.credentials = null;
        // overridable inputs (both class and instance)
        this.debug = true;
    }
    /**
     * @return {?}
     */
    ClientComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.client = Client({
            game: this.game,
            ai: this.ai,
            numPlayers: this.numPlayers,
            multiplayer: this.multiplayer,
            gameID: this.gameID,
            playerID: this.playerID,
            credentials: this.credentials,
            enhancer: this.enhancer,
        });
        // todo is this needed? (forceUpdate on react)
        // this.client.subscribe(() => {
        //   console.log('client.subscribe triggered (forceUpdate needed?)');
        // });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ClientComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.client) {
            // noinspection TsLint
            if (changes["gameID"] && changes["gameID"].currentValue != changes["gameID"].previousValue) {
                this.client.updateGameID(changes["gameID"].currentValue);
            }
            // noinspection TsLint
            if (changes["playerID"] && changes["playerID"].currentValue != changes["playerID"].previousValue) {
                this.client.updatePlayerID(changes["playerID"].currentValue);
            }
            // noinspection TsLint
            if (changes["credentials"] && changes["credentials"].currentValue != changes["credentials"].previousValue) {
                this.client.updateCredentials(changes["credentials"].currentValue);
            }
        }
    };
    /**
     * @return {?}
     */
    ClientComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.client.connect();
    };
    /**
     * @return {?}
     */
    ClientComponent.prototype.getBoardInputs = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ state = this.client.getState();
        return __assign({}, state, { isMultiplayer: this.multiplayer !== undefined, moves: this.client.moves, events: this.client.events, gameID: this.gameID, playerID: this.playerID, reset: this.client.reset, undo: this.client.undo, redo: this.client.redo });
    };
    ClientComponent.decorators = [
        { type: Component, args: [{
                    selector: 'bio-client',
                    template: "\n    <ng-container *ngIf=\"client\">\n      <ng-container *ngComponentOutlet=\"board;\n                                            ndcDynamicInputs: getBoardInputs()\">\n      </ng-container>\n    </ng-container>\n\n    <bio-debug *ngIf=\"debug && client\"\n               [gamestate]=\"client.getState()\"\n               [gameID]=\"gameID\"\n               [playerID]=\"playerID\"\n               [isMultiplayer]=\"multiplayer !== undefined\"\n               [moves]=\"client.moves\"\n               [events]=\"client.events\"\n               [store]=\"client.store\"\n               [step]=\"client.step\"\n               [reset]=\"client.reset\"\n               [reducer]=\"client.reducer\"\n    ></bio-debug>\n  "
                },] },
    ];
    ClientComponent.propDecorators = {
        game: [{ type: Input }],
        numPlayers: [{ type: Input }],
        board: [{ type: Input }],
        multiplayer: [{ type: Input }],
        ai: [{ type: Input }],
        enhancer: [{ type: Input }],
        gameID: [{ type: Input }],
        playerID: [{ type: Input }],
        credentials: [{ type: Input }],
        debug: [{ type: Input }]
    };
    return ClientComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DebugComponent = /** @class */ (function () {
    function DebugComponent() {
    }
    /**
     * @return {?}
     */
    DebugComponent.prototype.getRootDomNode = /**
     * @return {?}
     */
    function () {
        return document.getElementById(this.rootDomID);
    };
    /**
     * @return {?}
     */
    DebugComponent.prototype.getProps = /**
     * @return {?}
     */
    function () {
        var _a = this, gamestate = _a.gamestate, gameID = _a.gameID, playerID = _a.playerID, isConnected = _a.isConnected, isMultiplayer = _a.isMultiplayer, moves = _a.moves, events = _a.events, restore = _a.restore, showLog = _a.showLog, store = _a.store, step = _a.step, reset = _a.reset, reducer = _a.reducer, overrideGameState = _a.overrideGameState, visualizeAI = _a.visualizeAI;
        return {
            gamestate: gamestate,
            gameID: gameID,
            playerID: playerID,
            isConnected: isConnected,
            isMultiplayer: isMultiplayer,
            moves: moves,
            events: events,
            restore: restore,
            showLog: showLog,
            store: store,
            step: step,
            reset: reset,
            reducer: reducer,
            overrideGameState: overrideGameState,
            visualizeAI: visualizeAI,
        };
    };
    /**
     * @return {?}
     */
    DebugComponent.prototype.isMounted = /**
     * @return {?}
     */
    function () {
        return !!this.rootDomID;
    };
    /**
     * @return {?}
     */
    DebugComponent.prototype.render = /**
     * @return {?}
     */
    function () {
        if (this.isMounted()) {
            render(createElement(Debug, this.getProps()), this.getRootDomNode());
        }
    };
    /**
     * @return {?}
     */
    DebugComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.rootDomID = v1();
    };
    /**
     * @return {?}
     */
    DebugComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.render();
    };
    /**
     * @return {?}
     */
    DebugComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.render();
    };
    /**
     * @return {?}
     */
    DebugComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        unmountComponentAtNode(this.getRootDomNode());
    };
    DebugComponent.decorators = [
        { type: Component, args: [{
                    selector: 'bio-debug',
                    template: '<span [id]="rootDomID"></span>'
                },] },
    ];
    DebugComponent.propDecorators = {
        gamestate: [{ type: Input }],
        gameID: [{ type: Input }],
        playerID: [{ type: Input }],
        isConnected: [{ type: Input }],
        isMultiplayer: [{ type: Input }],
        moves: [{ type: Input }],
        events: [{ type: Input }],
        restore: [{ type: Input }],
        showLog: [{ type: Input }],
        store: [{ type: Input }],
        step: [{ type: Input }],
        reset: [{ type: Input }],
        reducer: [{ type: Input }],
        overrideGameState: [{ type: Input }],
        visualizeAI: [{ type: Input }]
    };
    return DebugComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var BoardgameIoModule = /** @class */ (function () {
    function BoardgameIoModule() {
    }
    BoardgameIoModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        DynamicModule.withComponents(null),
                    ],
                    declarations: [ClientComponent, DebugComponent],
                    exports: [ClientComponent]
                },] },
    ];
    return BoardgameIoModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { ClientComponent, BoardgameIoModule, DebugComponent as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,