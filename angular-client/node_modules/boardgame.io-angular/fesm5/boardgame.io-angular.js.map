{"version":3,"file":"boardgame.io-angular.js.map","sources":["ng://boardgame.io-angular/lib/bio-client.component.ts","ng://boardgame.io-angular/lib/bio-debug.component.ts","ng://boardgame.io-angular/lib/boardgame-io.module.ts"],"sourcesContent":["import { AfterContentInit, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { Client as RawClient, Debug } from 'boardgame.io/dist/client';\r\n\r\n@Component({\r\n  selector: 'bio-client',\r\n  template: `\r\n    <ng-container *ngIf=\"client\">\r\n      <ng-container *ngComponentOutlet=\"board;\r\n                                            ndcDynamicInputs: getBoardInputs()\">\r\n      </ng-container>\r\n    </ng-container>\r\n\r\n    <bio-debug *ngIf=\"debug && client\"\r\n               [gamestate]=\"client.getState()\"\r\n               [gameID]=\"gameID\"\r\n               [playerID]=\"playerID\"\r\n               [isMultiplayer]=\"multiplayer !== undefined\"\r\n               [moves]=\"client.moves\"\r\n               [events]=\"client.events\"\r\n               [store]=\"client.store\"\r\n               [step]=\"client.step\"\r\n               [reset]=\"client.reset\"\r\n               [reducer]=\"client.reducer\"\r\n    ></bio-debug>\r\n  `\r\n})\r\nexport class ClientComponent implements OnInit, OnChanges, AfterContentInit {\r\n\r\n  // class inputs (possible move to higher level initialization (e.g., class factory)\r\n  @Input() game: any;\r\n  @Input() numPlayers: number;\r\n  @Input() board: any;\r\n  @Input() multiplayer: any;\r\n  @Input() ai: any;\r\n  @Input() enhancer: any;\r\n\r\n  // instance inputs\r\n  @Input() gameID = 'default';\r\n  @Input() playerID: string = null;\r\n  @Input() credentials: string = null; // TODO this\r\n\r\n  // overridable inputs (both class and instance)\r\n  @Input() debug = true;\r\n\r\n  client: any;\r\n\r\n  ngOnInit() {\r\n    this.client = RawClient({\r\n      game: this.game,\r\n      ai: this.ai,\r\n      numPlayers: this.numPlayers,\r\n      multiplayer: this.multiplayer,\r\n      gameID: this.gameID,\r\n      playerID: this.playerID,\r\n      credentials: this.credentials,\r\n      enhancer: this.enhancer,\r\n    });\r\n\r\n    // todo is this needed? (forceUpdate on react)\r\n    // this.client.subscribe(() => {\r\n    //   console.log('client.subscribe triggered (forceUpdate needed?)');\r\n    // });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (this.client) {\r\n      // noinspection TsLint\r\n      if (changes.gameID && changes.gameID.currentValue != changes.gameID.previousValue) {\r\n        this.client.updateGameID(changes.gameID.currentValue);\r\n      }\r\n      // noinspection TsLint\r\n      if (changes.playerID && changes.playerID.currentValue != changes.playerID.previousValue) {\r\n        this.client.updatePlayerID(changes.playerID.currentValue);\r\n      }\r\n      // noinspection TsLint\r\n      if (changes.credentials && changes.credentials.currentValue != changes.credentials.previousValue) {\r\n        this.client.updateCredentials(changes.credentials.currentValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this.client.connect();\r\n  }\r\n\r\n  getBoardInputs() {\r\n    const state = this.client.getState();\r\n    return {\r\n      ...state,\r\n      isMultiplayer: this.multiplayer !== undefined,\r\n      moves: this.client.moves,\r\n      events: this.client.events,\r\n      gameID: this.gameID,\r\n      playerID: this.playerID,\r\n      reset: this.client.reset,\r\n      undo: this.client.undo,\r\n      redo: this.client.redo,\r\n    };\r\n\r\n  }\r\n\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Debug } from 'boardgame.io/dist/react';\r\nimport * as uuid from 'uuid';\r\n\r\nimport { AfterViewInit, Component, Input, OnChanges, OnDestroy, OnInit } from '@angular/core';\r\n\r\nexport interface GameState {\r\n  G: any;\r\n  ctx: any;\r\n  log: any;\r\n  isActive?: boolean;\r\n  _initial: any;\r\n}\r\n\r\nexport interface DebugProps {\r\n  gamestate: GameState;\r\n  gameID: string;\r\n  playerID?: string;\r\n  isConnected?: boolean;\r\n  isMultiplayer?: boolean;\r\n  moves?: any;\r\n  events?: any;\r\n  restore?: Function;\r\n  showLog?: boolean;\r\n  store?: any;\r\n  step?: Function;\r\n  reset?: Function;\r\n  reducer?: Function;\r\n  overrideGameState?: Function;\r\n  visualizeAI?: Function;\r\n}\r\n\r\n@Component({\r\n  selector: 'bio-debug',\r\n  template: '<span [id]=\"rootDomID\"></span>'\r\n})\r\nexport class DebugComponent implements OnInit, OnDestroy, OnChanges, AfterViewInit {\r\n  @Input() gamestate: GameState;\r\n  @Input() gameID: string;\r\n  @Input() playerID?: string;\r\n  @Input() isConnected?: boolean;\r\n  @Input() isMultiplayer?: boolean;\r\n  @Input() moves?: any;\r\n  @Input() events?: any;\r\n  @Input() restore?: Function;\r\n  @Input() showLog?: boolean;\r\n  @Input() store?: any;\r\n  @Input() step?: Function;\r\n  @Input() reset?: Function;\r\n  @Input() reducer?: Function;\r\n  @Input() overrideGameState?: Function;\r\n  @Input() visualizeAI?: Function;\r\n\r\n  rootDomID: string;\r\n\r\n  protected getRootDomNode() {\r\n    return document.getElementById(this.rootDomID);\r\n  }\r\n\r\n  protected getProps(): DebugProps {\r\n    const {\r\n      gamestate,\r\n      gameID,\r\n      playerID,\r\n      isConnected,\r\n      isMultiplayer,\r\n      moves,\r\n      events,\r\n      restore,\r\n      showLog,\r\n      store,\r\n      step,\r\n      reset,\r\n      reducer,\r\n      overrideGameState,\r\n      visualizeAI,\r\n    } = this;\r\n    return {\r\n      gamestate,\r\n      gameID,\r\n      playerID,\r\n      isConnected,\r\n      isMultiplayer,\r\n      moves,\r\n      events,\r\n      restore,\r\n      showLog,\r\n      store,\r\n      step,\r\n      reset,\r\n      reducer,\r\n      overrideGameState,\r\n      visualizeAI,\r\n    };\r\n  }\r\n\r\n  private isMounted(): boolean {\r\n    return !!this.rootDomID;\r\n  }\r\n\r\n  protected render() {\r\n    if (this.isMounted()) {\r\n      ReactDOM.render(\r\n        React.createElement(Debug, this.getProps()),\r\n        this.getRootDomNode()\r\n      );\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.rootDomID = uuid.v1();\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this.render();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.render();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    ReactDOM.unmountComponentAtNode(this.getRootDomNode());\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ClientComponent } from './bio-client.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DynamicModule } from 'ng-dynamic-component';\r\nimport { DebugComponent } from './bio-debug.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n\r\n    DynamicModule.withComponents(null),\r\n  ],\r\n  declarations: [ClientComponent, DebugComponent],\r\n  exports: [ClientComponent]\r\n})\r\nexport class BoardgameIoModule { }\r\n"],"names":["RawClient","ReactDOM.render","React.createElement","uuid.v1","ReactDOM.unmountComponentAtNode"],"mappings":"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"}
